<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Misc | Open Spirits]]></title>
  <link href="http://pawa.github.com/blog/categories/misc/atom.xml" rel="self"/>
  <link href="http://pawa.github.com/"/>
  <updated>2013-05-02T14:35:20+08:00</updated>
  <id>http://pawa.github.com/</id>
  <author>
    <name><![CDATA[Stone Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Day 2 of SDCC 2012]]></title>
    <link href="http://pawa.github.com/blog/2012/09/09/day-2-of-sdcc-2012/"/>
    <updated>2012-09-09T23:18:00+08:00</updated>
    <id>http://pawa.github.com/blog/2012/09/09/day-2-of-sdcc-2012</id>
    <content type="html"><![CDATA[<h3>耗子哥</h3>

<p>CoollShell 的作者，一个非常有观点的同学，反对敏捷 / 反对不写代码的专家 / C++ 脑残粉，我倒是很赞同他的有观点比没观点总是要好。他的题目比较大，高并发互联网应用，基本上每个 Slide 都可以来讲2小时，所以没法深入，可以当个提纲参考。</p>

<h3>Netflix</h3>

<p>又是 Netflix，今天是详细介绍他们的云平台，所谓这个云平台其实就是在 AWS 的 IaaS 基础上开发了一个自己的 PaaS， 实际上底层的实现是无关应用开发的，也就是说哪天他们想自己做 IDC 了，只需要重新实现一些 AWS 特定的实现，应用完全不用修改。这个平台里有的模块都是与具体业务实现无关的抽象和总结，比如：服务注册、配置管理、日志收集、资源调度。后来有一部分因为有个线上 BUG 要处理，没听到，有 PPT 后再重温一下。</p>

<h3>Amazon</h3>

<p>大型软件自动化部署，这个相当感兴趣，分析的很深入。几个印象深刻的地方：1. 统一部署概念（任何安装都是部署） 2. 部署=搬家 3. DevOps 是改进是不起作用的，要创新革命</p>

<h3>丁香园</h3>

<p>大辉同学介绍了2年来对丁香园的一些改进，有坑也有成功，对中小创业团队很有帮助，我的感觉是原来大家碰到的问题都一样。其实最想交流的是团队建设、安全防护、反垃圾方面的实践。会后和大辉换了名片，他太忙，没顾上聊，他倒是赞了雪球的产品，交流了几个产品问题，非常感谢他的支持。希望以后有机会深入交流。</p>

<h3>总体感觉</h3>

<p>这两天的会还是有不少收获，特别是有两个最近思考的问题似乎有了点思路</p>

<ol>
<li><p>现阶段我们是否真的需要专职的运维工程师以及如何做运维工作，似乎答案很明确了 - <strong>不需要</strong>。受 Amazon 同学演讲的启发，他们认为互联网产品实际上不需要 QA 也不需要 Ops，我认为确实是对的。就像 “Google 如何测试” 那个系列描述的 QA 的职责是维护自动化测试框架、工具以及指导监督开发人员进行具体测试开发一样，Ops 也应该是去维护自动化运维的流程、工具、框架以及指导开发人员进行具体的日常运维。因为只有开发人员自己才最了解业务，最了解需求，最了解哪里最可能出现问题，也最可能最快定位和解决问题。如果他们都能自助的解决问题，为啥非要和另外一个角色去沟通交流呢，完全没必要。所以就算我们需要专业的运维工程师，也肯定是需要有非常丰富开发经验的工程师来完成上边描述的事。</p></li>
<li><p>如何更有效的开发、测试、部署，答案应该就是 - <strong>虚拟化</strong>。Twitter / Netflix / Alipay / Douban 都在做类似的事情，尽管他们的实现方式千差万别，不过核心的思路是，提供统一的开发框架、统一的开发测试环境、统一的部署环境，部署就是把开发测试的环境搬个家而已。感觉要实现类似的效果唯有实现自己的 PaaS 平台，屏蔽开发者对于底层服务的安装配置，高度抽象提取公共模块，统一系统框架（开发、运维方式），至于是通过虚拟机方式还是 Mesos 的资源共享方式，还有待研究，好在各种方式都有可以参考的对象。</p></li>
</ol>


<h3>加个广告</h3>

<p>以上我描述的解决问题的方法，或早或晚都会成为我们公司产品架构的一部分，如果有任何同学感兴趣可以随时联系我 wangdong # xueqiu.com</p>

<p>至于我们公司的情况请猛击：<a href="http://xueqiu.com/about/what-is-xueqiu">http://xueqiu.com/about/what-is-xueqiu</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 1 of SDCC 2012]]></title>
    <link href="http://pawa.github.com/blog/2012/09/08/day-1-of-sdcc-2012/"/>
    <updated>2012-09-08T23:42:00+08:00</updated>
    <id>http://pawa.github.com/blog/2012/09/08/day-1-of-sdcc-2012</id>
    <content type="html"><![CDATA[<p>周末两天参加 SDCC 2012 的会议，有些有意思的见闻和想法。</p>

<h3>上午</h3>

<p>一句话简介：垃圾时间，木啥收获</p>

<h3>Twitter</h3>

<p>一位 Twitter 的华裔女工程师，当然是一口流利的普通话，话说这在历次参加过的技术会议上还是比较少见的。</p>

<p>讲的内容是关于 Twitter 的架构演进，从一个全功能的 App 逐步走向模块化的 Service，为了 Service 的方便开发、管理、追踪开发了一系列的基础设施和框架，而且都开源了，这些个东西以前多少都看过这次是更加深了印象。为了开发这些 Service 他们还基本上从 Ruby 迁移到了 Jvm 上（现在应该绝大多数是 Scala，印象中也有 Clojure 了，不确定）。最后还提到引入了 Mesos，来做虚拟化资源管理，提高资源的利用率（记得今年 Qcon 时候，豆瓣的 hongqn 也提到他们在做 dae 中也在使用 Mesos）。</p>

<p>演讲后还和她简单交流了一下，问了俩问题，也挺有启发</p>

<ol>
<li><p>如何保证模块化之间的正确依赖，答案是：紧密的模块都在同一个 Repo 会一起编译，并且运行相应的测试代码，如果是 RPC 调用，只要 Thrift 接口的版本是一致的，也不会有问题，单元测试是比较全面的不过针对 RPC 之间的测试并没有那么完善。</p></li>
<li><p>如何做集成测试，答案是：利用 Iago 复制产品环境的流量，然后 Replay 去测试一个完整的测试集群。</p></li>
</ol>


<h3>Netflix</h3>

<p>因为 Netflix 全部基于 Amaonz 的 AWS 服务，所以 Build/Test 都是是以虚拟机的镜像文件为单位的，加上他们自己的云管理平台，极大的简化了测试和部署的繁琐。另外 Netflix 有两个比较特别的制度，引起在场屌丝们的议论，特别是第一个</p>

<ol>
<li><p>无限制休假 - 任何时间任何长度的休假都由自己决定，当然前提是不影响工作以及有问题随时中止休假。我觉得似乎做到这个不是很难吧，不管是公司方面还是雇员，特别对于工程师，其实本质上和在家或者在什么地方远程工作没啥区别，反正不是写这些代码就是写那些代码，不同的是在哪写而已。</p></li>
<li><p>无职位差别，都是 Senior Engineer 进公司就这样，出去还这样，这个好多人没啥感觉，但我觉得这个才是个厉害的招数，非常的反常轨，一般可能只有几个人的公司才做得到。对于一家上市的成熟企业还是很难的，这样的好处是找到的愿意加入的人都是愿意 Coding 的，对于 Title 没啥追求，所以一群热爱 Coding 的人自然能做到很牛的事，真是印象深刻这一点。</p></li>
</ol>


<h3>支付宝</h3>

<p>架构也是从 单一应用 -> 面向服务 -> 云平台 这样的演进，看来雪球还处于最初阶段呢，有的是折腾的空间 :p</p>

<p>同时他们的架构也异常复杂，可能由于流量特别大，业务特别复杂导致的，所以 90% 的公司永远都不会用到那么复杂的架构，又或许应该还有更简单的方法？没有经历过那种场景还是无法深刻的理解。对于一天要支持1亿笔交易的目标，还是觉得非常震撼和佩服。</p>

<h3>虚拟化</h3>

<p>Twitter / Netflix / 支付宝 都在虚拟化(或者所谓的云平台)上做了技术上的投资，我还是更愿意说虚拟化而不是什么云。这个趋势是实实在在的为了解决很多问题才流行的而不是 buzzword 驱使。</p>

<p>最直接解决的生产环境问题是 1. 最大化利用硬件资源 2. 自动化的错误检测/处理/升级。除了这些，我想虚拟化还可以应用在开发/测试/持续集成等所有的开发活动中来简化开发环境的配置并且更真实的模拟生生产环境。</p>
]]></content>
  </entry>
  
</feed>
